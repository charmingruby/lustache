// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  phoneNumber  String   @unique
  cpf          String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customerAccount CustomerAccount?
  barberAccount   BarberAccount?
}

model CustomerAccount {
  id                String   @id @default(uuid())
  userId            String   @unique
  amountOfSchedules Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCodesGenerated PromoCode[]
  schedulings         Scheduling[]
}

model BarberAccount {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedulings Scheduling[]
}

model PromoCode {
  id        String    @id @default(uuid())
  code      String
  createdBy String    @unique
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  customer   CustomerAccount @relation(fields: [createdBy], references: [id])
  scheduling Scheduling?
}

model Cut {
  id                             String   @id @default(uuid())
  name                           String
  price                          Float
  age_category                   String
  timeInAQuarterOfAnHourQuantity Int
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  schedulings Scheduling[]
}

model Scheduling {
  id     String   @id @default(uuid())
  date   DateTime
  time   String
  endAt  String
  status String

  barberAccountId   String
  customerAccountId String
  cutId             String
  promoCodeId       String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  promoCode PromoCode       @relation(fields: [promoCodeId], references: [id])
  cut       Cut             @relation(fields: [cutId], references: [id])
  customer  CustomerAccount @relation(fields: [customerAccountId], references: [id])
  barber    BarberAccount   @relation(fields: [barberAccountId], references: [id])
}
